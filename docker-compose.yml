version: "3.9"

services:
  # ---------- Postgres ----------
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 10

  # ---------- Redis ----------
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  # ---------- Airflow ----------
  airflow-webserver:
    build: { context: ., dockerfile: Dockerfile.airflow }
    env_file: [.env]
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      # MLflow inside the compose network:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      # DVC creds (from .env)
      DVC_HTTP_USER: ${DVC_HTTP_USER:-}
      DVC_HTTP_PASSWORD: ${DVC_HTTP_PASSWORD:-}
      # ZenML client -> ZenML server in compose
      ZENML_SERVER_URL: http://zenml:8237
      ZENML_DEFAULT_USERNAME: ${ZENML_USERNAME:-admin}
      ZENML_DEFAULT_PASSWORD: ${ZENML_PASSWORD:-admin}
    depends_on:
      postgres: { condition: service_started }
      redis: { condition: service_started }
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./:/mlops
    ports: ["8080:8080"]
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 40

  airflow-scheduler:
    build: { context: ., dockerfile: Dockerfile.airflow }
    env_file: [.env]
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      # MLflow inside the compose network:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      # DVC creds (from .env)
      DVC_HTTP_USER: ${DVC_HTTP_USER:-}
      DVC_HTTP_PASSWORD: ${DVC_HTTP_PASSWORD:-}
      # ZenML client config
      ZENML_SERVER_URL: http://zenml:8237
      ZENML_DEFAULT_USERNAME: ${ZENML_USERNAME:-admin}
      ZENML_DEFAULT_PASSWORD: ${ZENML_PASSWORD:-admin}
    depends_on:
      postgres: { condition: service_started }
      redis: { condition: service_started }
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./:/mlops
    command: scheduler

  airflow-worker:
    build: { context: ., dockerfile: Dockerfile.airflow }
    env_file: [.env]
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      # MLflow inside the compose network:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      # DVC creds (from .env)
      DVC_HTTP_USER: ${DVC_HTTP_USER:-}
      DVC_HTTP_PASSWORD: ${DVC_HTTP_PASSWORD:-}
      # ZenML client config
      ZENML_SERVER_URL: http://zenml:8237
      ZENML_DEFAULT_USERNAME: ${ZENML_USERNAME:-admin}
      ZENML_DEFAULT_PASSWORD: ${ZENML_PASSWORD:-admin}
    depends_on:
      postgres: { condition: service_started }
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./:/mlops
    command: celery worker

  airflow-init:
    build: { context: ., dockerfile: Dockerfile.airflow }
    env_file: [.env]
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      # DVC creds (optional for init)
      DVC_HTTP_USER: ${DVC_HTTP_USER:-}
      DVC_HTTP_PASSWORD: ${DVC_HTTP_PASSWORD:-}
      # ZenML client config (optional for init)
      ZENML_SERVER_URL: http://zenml:8237
      ZENML_DEFAULT_USERNAME: ${ZENML_USERNAME:-admin}
      ZENML_DEFAULT_PASSWORD: ${ZENML_PASSWORD:-admin}
    depends_on:
      postgres: { condition: service_started }
      redis: { condition: service_started }
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate
        airflow users create \
          --username admin --password admin \
          --firstname Admin --lastname User \
          --role Admin --email admin@example.com
        echo "Airflow init done."

  # ---------- MLflow ----------
  mlflow:
    image: ghcr.io/mlflow/mlflow
    ports: ["5000:5000"]
    volumes:
      - ./mlruns:/mlruns
    command: mlflow server --host 0.0.0.0 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlruns
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5000/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20

  # ---------- ZenML API (0.84.3) ----------
  zenml:
    build: { context: ., dockerfile: Dockerfile.zenml }
    environment:
      ZENML_DEFAULT_USERNAME: ${ZENML_USERNAME:-admin}
      ZENML_DEFAULT_PASSWORD: ${ZENML_PASSWORD:-admin}
    ports: ["8237:8237"]
    volumes:
      - ./zenml_data:/root/.config/zenml
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8237 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 40

  # ---------- DVC CLI utility ----------
  dvc-cli:
    build: { context: ., dockerfile: Dockerfile.dvccli }
    environment:
      DVC_HTTP_USER: ${DVC_HTTP_USER:-}
      DVC_HTTP_PASSWORD: ${DVC_HTTP_PASSWORD:-}
    volumes:
      - ./:/repo
    working_dir: /repo
    entrypoint: ["bash"]

volumes:
  pgdata:
